{"version":3,"sources":["components/MyNavbar/MyNavbar.js","components/ClickerComp/ClickerComp.js","components/ClickerWrapper/ClickerWrapper.js","App.js","serviceWorker.js","index.js"],"names":["MyNavbar","Navbar","color","light","NavbarBrand","href","className","style","ClickerComp","props","Col","md","Card","onClick","imgClick","id","margin","CardImg","height","src","img","alt","width","ClickerWrapper","state","imgs","score","topScore","clicked","updateTop","setState","indexOf","concat","randomizeArray","array","i","length","j","Math","floor","random","this","CardDeck","map","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAceA,EAXE,WAEb,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,MAAM,OAAOC,OAAK,GACtB,kBAACC,EAAA,EAAD,CAAaC,KAAK,IAAIC,UAAU,UAAUC,MAAO,CAAEL,MAAO,UAA1D,mB,uECQDM,MAbf,SAAqBC,GACjB,OAEI,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIL,UAAU,eAClB,kBAACM,EAAA,EAAD,CAAMN,UAAU,kCAAkCO,QAAS,WAAQJ,EAAMK,SAASL,EAAMM,KAAOR,MAAO,CAAES,OAAQ,SAC5G,kBAACC,EAAA,EAAD,CAASX,UAAU,sBAAsBY,OAAO,MAAMC,IAAKV,EAAMW,IAAKC,IAAKZ,EAAMY,IAAKd,MAAO,CAAEe,MAAO,Y,QCmFvGC,E,2MAlFXC,MAAQ,CACJC,OACAC,MAAO,EACPC,SAAU,EACVC,QAAS,I,EAObC,UAAY,WACJ,EAAKL,MAAME,OAAS,EAAKF,MAAMG,UAC/B,EAAKG,SAAS,CAAEH,SAAU,EAAKH,MAAME,S,EAK7CZ,SAAW,SAACC,IAEgC,IAApC,EAAKS,MAAMI,QAAQG,QAAQhB,IAE3B,EAAKe,SAAS,CACVJ,MAAO,EAAKF,MAAME,MAAQ,EAC1BE,QAAS,EAAKJ,MAAMI,QAAQI,OAAOjB,KACpC,WAGC,EAAKc,eAGgB,KAArB,EAAKL,MAAME,OACX,EAAKI,SAAS,CACVJ,MAAO,EACPE,QAAS,MAKjB,EAAKE,SAAS,CAAEJ,MAAO,EAAGE,QAAS,KAIvC,EAAKK,kB,EAGTA,eAAiB,WAGb,IAFA,IAAIC,EAAQT,EAEHU,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAEhB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgC,KAE5BD,EAAMG,GAFsB,KAK3C,EAAKP,SAAS,CAAEL,KAAMS,K,mFA9CtBO,KAAKR,mB,+BAiDC,IAAD,OACL,OAGI,6BACI,6BACA,yBAAK3B,UAAU,eACX,6CAAmBmC,KAAKjB,MAAME,OAC9B,yCAAee,KAAKjB,MAAMG,WAE9B,6BACA,kBAACe,EAAA,EAAD,KACKD,KAAKjB,MAAMC,KAAKkB,KAAI,SAAAvB,GAAG,OACpB,kBAAC,EAAD,CACIA,IAAKA,EAAIA,IACTL,GAAIK,EAAIL,GACRM,IAAKD,EAAIC,IACTP,SAAU,EAAKA,oB,GA3Ed8B,a,QCUdC,MAZf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,MACA,kBAACwC,EAAA,EAAD,KACE,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d65a419c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, NavbarBrand } from 'reactstrap';\r\n\r\nconst MyNavbar = () => {\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"dark\" light>\r\n                <NavbarBrand href=\"#\" className=\"mx-auto\" style={{ color: \"white\" }}>Clicker Game</NavbarBrand>\r\n            </Navbar>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default MyNavbar;\r\n","import React from \"react\";\r\nimport { Col, Card, CardImg } from \"reactstrap\";\r\n\r\nfunction ClickerComp(props) {\r\n    return (\r\n\r\n        <Col md='3' className=\"text-center\">\r\n            <Card className=\"justify-content-center border-0\" onClick={() => { props.imgClick(props.id) }} style={{ margin: \".5em\" }}>\r\n                <CardImg className=\"mx-auto text-center\" height=\"150\" src={props.img} alt={props.alt} style={{ width: \"60%\" }} />\r\n            </Card>\r\n        </Col>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default ClickerComp;\r\n","import { Component } from \"react\";\r\nimport imgs from \"../../imgs.json\";\r\nimport React from \"react\"\r\nimport ClickerComp from \"../ClickerComp\"\r\nimport { CardDeck } from \"reactstrap\"\r\n\r\n\r\n\r\nclass ClickerWrapper extends Component {\r\n    state = {\r\n        imgs,\r\n        score: 0,\r\n        topScore: 0,\r\n        clicked: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.randomizeArray();\r\n    }\r\n\r\n    updateTop = () => {\r\n        if (this.state.score >= this.state.topScore) {\r\n            this.setState({ topScore: this.state.score });\r\n        }\r\n\r\n    }\r\n\r\n    imgClick = (id) => {\r\n        // success\r\n        if (this.state.clicked.indexOf(id) === -1) {\r\n            //increase score\r\n            this.setState({\r\n                score: this.state.score + 1,\r\n                clicked: this.state.clicked.concat(id)\r\n            }, () => {\r\n                //using a callback since setstate is async\r\n                //check to the see if the new score is the new top score also\r\n                this.updateTop();\r\n            });\r\n            //if the player has hit all the images than reset the game\r\n            if (this.state.score === 12) {\r\n                this.setState({\r\n                    score: 0,\r\n                    clicked: []\r\n                });\r\n            }\r\n        } else {\r\n            //failure\r\n            this.setState({ score: 0, clicked: [] });\r\n        }\r\n\r\n        //change the images shown\r\n        this.randomizeArray();\r\n    }\r\n\r\n    randomizeArray = () => {\r\n        let array = imgs;\r\n        //this is boiler plate code to randomize an array\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        //set imgs to the randomized array\r\n        this.setState({ imgs: array });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n\r\n            < div >\r\n                <br />\r\n                <div className=\"text-center\">\r\n                    <p>Current Score: {this.state.score}</p>\r\n                    <p>Top Score: {this.state.topScore}</p>\r\n                </div>\r\n                <br />\r\n                <CardDeck>\r\n                    {this.state.imgs.map(img => (\r\n                        <ClickerComp\r\n                            img={img.img}\r\n                            id={img.id}\r\n                            alt={img.alt}\r\n                            imgClick={this.imgClick} />\r\n                    ))}\r\n                </CardDeck>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClickerWrapper;","import React from 'react';\nimport MyNavbar from './components/MyNavbar';\nimport ClickerWrapper from './components/ClickerWrapper/ClickerWrapper';\nimport { Container } from 'reactstrap';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MyNavbar />\n      <Container>\n        <ClickerWrapper />\n      </Container>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}